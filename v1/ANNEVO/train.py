import argparse
from ANNEVO.src.train import model_train
from ANNEVO.utils.utils import init_dist, seed_everything


def main():
    parser = argparse.ArgumentParser(description="Retraining ANNEVO."
                                                 "Note: When retraining the model, users can customize the model architecture, "
                                                 "but window_size and flank_length must match those used in data processing, "
                                                 "as they determine the modelâ€™s input dimensions. "
                                                 "If modifying the model architecture, corresponding parameters in ANNEVO.prediction must be adjusted to ensure consistency.")
    parser.add_argument('--train_list', required=True, help='Path to the training species list.')
    parser.add_argument('--val_list', required=True, help='Path to the validation species list.')
    parser.add_argument('--h5_path', required=True,
                        help='Path to the h5 file generated by data processing.')
    parser.add_argument('--model_save_path', type=str, default='ANNEVO.pt', help='Path to save the trained model.')
    parser.add_argument('--learning_rate', type=float, default=0.001, help='Learning rate for training.')
    parser.add_argument('--epoch', type=int, default=100, help='Maximum number of training epochs.')
    parser.add_argument('--batch_size', type=int, default=24, help='Number of samples per batch.')
    parser.add_argument('--patience', type=int, default=5, help='Patience value for early stopping.')
    parser.add_argument('--class_weights_base', type=float, nargs=4, default=[1, 1, 1, 1], help='Class weights for different base categories.')
    parser.add_argument('--class_weights_transition', type=float, nargs=2, default=[1, 1], help='Class weights for different transition categories.')
    parser.add_argument('--class_weights_phases', type=float, nargs=4, default=[1, 1, 1, 1], help='Class weights for different phase categories.')
    parser.add_argument('--window_size', type=int, default=20000,
                        help='Number of bases in a window. Must match the value used in data_processing, prediction and gene_decoding.')
    parser.add_argument('--flank_length', type=int, default=10000,
                        help='Length of the flanking sequence. Must match the value used in data_processing, prediction and gene_decoding.')
    parser.add_argument('--channels', type=int, default=16, help='Number of channels in the convolutional layer.')
    parser.add_argument('--dim_feedforward', type=int, default=256,
                        help='Dimension of the linear layer in the Transformer encoder.')
    parser.add_argument('--num_encoder_layers', type=int, default=2,
                        help='Number of Transformer encoder layers per block.')
    parser.add_argument('--num_heads', type=int, default=8,
                        help='Number of attention heads in multi-head attention.')
    parser.add_argument('--num_blocks', type=int, default=4, help='Number of convolutional blocks.')
    parser.add_argument('--num_branches', type=int, default=8,
                        help='Number of simulated sub-lineages.')
    args = parser.parse_args()

    num_classes_base = len(args.class_weights_base)
    num_classes_transition = len(args.class_weights_transition)
    num_classes_phases = len(args.class_weights_phases)
    with open(args.train_list, 'r') as file:
        train_species_list = [line.strip() for line in file]
    with open(args.val_list, 'r') as file:
        val_species_list = [line.strip() for line in file]

    model_train(train_species_list, val_species_list, args.model_save_path, args.h5_path, args.learning_rate, args.epoch, args.batch_size, args.patience, args.class_weights_base,
                args.class_weights_transition, args.class_weights_phases, args.window_size, args.flank_length, args.channels, args.dim_feedforward, args.num_encoder_layers,
                args.num_heads, args.num_blocks, args.num_branches, num_classes_base, num_classes_transition, num_classes_phases)


if __name__ == '__main__':
    init_dist()
    seed_everything(2024)
    main()
